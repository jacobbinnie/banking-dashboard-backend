/**
 * Yapily API
 * The Yapily API enables connections between your application and users\' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * OpenAPI spec version: 2.30.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AccountRequest } from '../models/AccountRequest';
import { RedirectRequest } from '../models/RedirectRequest';
import { ScaMethod } from '../models/ScaMethod';
import { UserCredentials } from '../models/UserCredentials';
import { HttpFile } from '../http/http';

export class EmbeddedAccountAuthorisationRequest {
    /**
    * `User` for which the authorisation request was created.
    */
    'userUuid'?: string;
    /**
    * __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
    */
    'applicationUserId'?: string;
    /**
    * Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect.
    */
    'forwardParameters'?: Array<string>;
    /**
    * __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
    */
    'institutionId': string;
    /**
    * __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/) for more information.
    */
    'callback'?: string;
    'redirect'?: RedirectRequest;
    /**
    * __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.
    */
    'oneTimeToken'?: boolean;
    'userCredentials'?: UserCredentials;
    'selectedScaMethod'?: ScaMethod;
    /**
    * __Conditional__. Used to update the authorisation with the sca code received by the user from the `Institution` using the embedded account authorisation flow.<br><br>This is the penultimate step required in the embedded account authorisation flow to authorise the `Consent`. After sending the sca code, to obtain an authorised consent, the last step is to poll [Get Consent](https://docs.yapily.com/api/reference/#operation/getConsentById) until the `Institution` authorises the request and the `Consent` `status` transitions to `AUTHORIZED`.
    */
    'scaCode'?: string;
    'accountRequest'?: AccountRequest;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "userUuid",
            "baseName": "userUuid",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "applicationUserId",
            "baseName": "applicationUserId",
            "type": "string",
            "format": ""
        },
        {
            "name": "forwardParameters",
            "baseName": "forwardParameters",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "institutionId",
            "baseName": "institutionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "callback",
            "baseName": "callback",
            "type": "string",
            "format": ""
        },
        {
            "name": "redirect",
            "baseName": "redirect",
            "type": "RedirectRequest",
            "format": ""
        },
        {
            "name": "oneTimeToken",
            "baseName": "oneTimeToken",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "userCredentials",
            "baseName": "userCredentials",
            "type": "UserCredentials",
            "format": ""
        },
        {
            "name": "selectedScaMethod",
            "baseName": "selectedScaMethod",
            "type": "ScaMethod",
            "format": ""
        },
        {
            "name": "scaCode",
            "baseName": "scaCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "accountRequest",
            "baseName": "accountRequest",
            "type": "AccountRequest",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return EmbeddedAccountAuthorisationRequest.attributeTypeMap;
    }

    public constructor() {
    }
}

