/**
 * Yapily API
 * The Yapily API enables connections between your application and users\' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * OpenAPI spec version: 2.30.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AddressDetails } from '../models/AddressDetails';
import { Amount } from '../models/Amount';
import { CurrencyExchange } from '../models/CurrencyExchange';
import { Enrichment } from '../models/Enrichment';
import { IsoBankTransactionCode } from '../models/IsoBankTransactionCode';
import { Merchant } from '../models/Merchant';
import { ProprietaryBankTransactionCode } from '../models/ProprietaryBankTransactionCode';
import { StatementReference } from '../models/StatementReference';
import { TransactionBalance } from '../models/TransactionBalance';
import { TransactionChargeDetails } from '../models/TransactionChargeDetails';
import { TransactionPayeeDetails } from '../models/TransactionPayeeDetails';
import { TransactionPayerDetails } from '../models/TransactionPayerDetails';
import { TransactionStatusEnum } from '../models/TransactionStatusEnum';
import { HttpFile } from '../http/http';

/**
* Details of a transaction (credit or debit) that has occurred on the account.
*/
export class Transaction {
    /**
    * Unique identifier of the transaction.
    */
    'id'?: string;
    'date'?: Date;
    /**
    * Date and time of when a transaction was booked.
    */
    'bookingDateTime'?: Date;
    /**
    * Date and time when the funds either cease to be available (for debit transactions) or become available (for credit transactions) to the account owner.
    */
    'valueDateTime'?: Date;
    'status'?: TransactionStatusEnum;
    /**
    * The transaction amount.
    */
    'amount'?: number;
    /**
    * Currency the transaction amount is denoted in. Specified as a 3-letter ISO 4217 code.
    */
    'currency'?: string;
    'transactionAmount'?: Amount;
    'grossAmount'?: Amount;
    'currencyExchange'?: CurrencyExchange;
    'chargeDetails'?: TransactionChargeDetails;
    'reference'?: string;
    'statementReferences'?: Array<StatementReference>;
    'description'?: string;
    /**
    * Further details on the transaction. This is narrative data, caught as unstructured text.
    */
    'transactionInformation'?: Array<string>;
    'addressDetails'?: AddressDetails;
    'isoBankTransactionCode'?: IsoBankTransactionCode;
    'proprietaryBankTransactionCode'?: ProprietaryBankTransactionCode;
    'balance'?: TransactionBalance;
    'payeeDetails'?: TransactionPayeeDetails;
    'payerDetails'?: TransactionPayerDetails;
    'merchant'?: Merchant;
    'enrichment'?: Enrichment;
    /**
    * Additional information that cannot be captured in a structured field or block.
    */
    'supplementaryData'?: any;
    /**
    * __Optional__. Specifies the Mutability of the Transaction record.<ul><li>A transaction with a `Status` of `Pending` is mutable.</li><li>A transaction with a `Status` of `Booked` where the `TransactionMutability` flag is not specified is not guaranteed to be immutable (although in most instances it will be).</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Immutable` is immutable.</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Mutable` is mutable.</li></ul>
    */
    'transactionMutability'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "bookingDateTime",
            "baseName": "bookingDateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "valueDateTime",
            "baseName": "valueDateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "TransactionStatusEnum",
            "format": ""
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number",
            "format": ""
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string",
            "format": ""
        },
        {
            "name": "transactionAmount",
            "baseName": "transactionAmount",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "grossAmount",
            "baseName": "grossAmount",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "currencyExchange",
            "baseName": "currencyExchange",
            "type": "CurrencyExchange",
            "format": ""
        },
        {
            "name": "chargeDetails",
            "baseName": "chargeDetails",
            "type": "TransactionChargeDetails",
            "format": ""
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string",
            "format": ""
        },
        {
            "name": "statementReferences",
            "baseName": "statementReferences",
            "type": "Array<StatementReference>",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "transactionInformation",
            "baseName": "transactionInformation",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "addressDetails",
            "baseName": "addressDetails",
            "type": "AddressDetails",
            "format": ""
        },
        {
            "name": "isoBankTransactionCode",
            "baseName": "isoBankTransactionCode",
            "type": "IsoBankTransactionCode",
            "format": ""
        },
        {
            "name": "proprietaryBankTransactionCode",
            "baseName": "proprietaryBankTransactionCode",
            "type": "ProprietaryBankTransactionCode",
            "format": ""
        },
        {
            "name": "balance",
            "baseName": "balance",
            "type": "TransactionBalance",
            "format": ""
        },
        {
            "name": "payeeDetails",
            "baseName": "payeeDetails",
            "type": "TransactionPayeeDetails",
            "format": ""
        },
        {
            "name": "payerDetails",
            "baseName": "payerDetails",
            "type": "TransactionPayerDetails",
            "format": ""
        },
        {
            "name": "merchant",
            "baseName": "merchant",
            "type": "Merchant",
            "format": ""
        },
        {
            "name": "enrichment",
            "baseName": "enrichment",
            "type": "Enrichment",
            "format": ""
        },
        {
            "name": "supplementaryData",
            "baseName": "supplementaryData",
            "type": "any",
            "format": ""
        },
        {
            "name": "transactionMutability",
            "baseName": "transactionMutability",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Transaction.attributeTypeMap;
    }

    public constructor() {
    }
}



