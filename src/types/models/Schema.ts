/**
 * Yapily API
 * The Yapily API enables connections between your application and users\' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * OpenAPI spec version: 2.30.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SchemaType } from '../models/SchemaType';
import { SchemaXYapilyAnnotations } from '../models/SchemaXYapilyAnnotations';
import { SchemaXYapilyValidations } from '../models/SchemaXYapilyValidations';
import { HttpFile } from '../http/http';

export class Schema {
    'title'?: string;
    'maximum'?: number;
    'exclusiveMaximum'?: number;
    'minimum'?: number;
    'exclusiveMinimum'?: number;
    'pattern'?: string;
    'maxItems'?: number;
    'minItems'?: number;
    'uniqueItems'?: boolean;
    'required'?: Set<string>;
    '_enum'?: Array<any>;
    'type'?: SchemaType;
    'contains'?: Schema;
    'not'?: Schema;
    '_if'?: Schema;
    'then'?: Schema;
    '_else'?: Schema;
    'allOf'?: Array<Schema>;
    'oneOf'?: Array<Schema>;
    'anyOf'?: Array<Schema>;
    'items'?: Schema;
    'properties'?: { [key: string]: Schema; };
    'description'?: string;
    'format'?: string;
    '_default'?: any | null;
    'example'?: any | null;
    /**
    * dependentRequired keyword is used to satisfy dependency between fields
    */
    'dependentRequired'?: { [key: string]: Set<string>; };
    'defs'?: { [key: string]: Schema; };
    'ref'?: string;
    'xYapilyAnnotations'?: SchemaXYapilyAnnotations;
    'xYapilyValidations'?: SchemaXYapilyValidations;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "title",
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        {
            "name": "maximum",
            "baseName": "maximum",
            "type": "number",
            "format": ""
        },
        {
            "name": "exclusiveMaximum",
            "baseName": "exclusiveMaximum",
            "type": "number",
            "format": ""
        },
        {
            "name": "minimum",
            "baseName": "minimum",
            "type": "number",
            "format": ""
        },
        {
            "name": "exclusiveMinimum",
            "baseName": "exclusiveMinimum",
            "type": "number",
            "format": ""
        },
        {
            "name": "pattern",
            "baseName": "pattern",
            "type": "string",
            "format": "regex"
        },
        {
            "name": "maxItems",
            "baseName": "maxItems",
            "type": "number",
            "format": ""
        },
        {
            "name": "minItems",
            "baseName": "minItems",
            "type": "number",
            "format": ""
        },
        {
            "name": "uniqueItems",
            "baseName": "uniqueItems",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "required",
            "baseName": "required",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "_enum",
            "baseName": "enum",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "SchemaType",
            "format": ""
        },
        {
            "name": "contains",
            "baseName": "contains",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "not",
            "baseName": "not",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "_if",
            "baseName": "if",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "then",
            "baseName": "then",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "_else",
            "baseName": "else",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "allOf",
            "baseName": "allOf",
            "type": "Array<Schema>",
            "format": ""
        },
        {
            "name": "oneOf",
            "baseName": "oneOf",
            "type": "Array<Schema>",
            "format": ""
        },
        {
            "name": "anyOf",
            "baseName": "anyOf",
            "type": "Array<Schema>",
            "format": ""
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "{ [key: string]: Schema; }",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "format",
            "baseName": "format",
            "type": "string",
            "format": ""
        },
        {
            "name": "_default",
            "baseName": "default",
            "type": "any",
            "format": ""
        },
        {
            "name": "example",
            "baseName": "example",
            "type": "any",
            "format": ""
        },
        {
            "name": "dependentRequired",
            "baseName": "dependentRequired",
            "type": "{ [key: string]: Set<string>; }",
            "format": ""
        },
        {
            "name": "defs",
            "baseName": "$defs",
            "type": "{ [key: string]: Schema; }",
            "format": ""
        },
        {
            "name": "ref",
            "baseName": "$ref",
            "type": "string",
            "format": ""
        },
        {
            "name": "xYapilyAnnotations",
            "baseName": "x-yapily-annotations",
            "type": "SchemaXYapilyAnnotations",
            "format": ""
        },
        {
            "name": "xYapilyValidations",
            "baseName": "x-yapily-validations",
            "type": "SchemaXYapilyValidations",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Schema.attributeTypeMap;
    }

    public constructor() {
    }
}



