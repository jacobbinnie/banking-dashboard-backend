/**
 * Yapily API
 * The Yapily API enables connections between your application and users\' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * OpenAPI spec version: 2.30.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AccountInfo } from '../models/AccountInfo';
import { FeatureEnum } from '../models/FeatureEnum';
import { HttpFile } from '../http/http';

/**
* __Conditional__. Used to further specify details of the `Consent` to request <br><br>Conditions:<ol><li>Mandatory to specify the individual scopes to request from the user at the `Institution` for an account authorisation</li><li>Mandatory to specify an expiry time on the created `Consent` at which time will render it unusable</li><li>Mandatory to specify the date range that the created `Consent` will be able to access transactions for (given the range is support for the `Institution`)</li></ol>
*/
export class AccountRequest {
    /**
    * __Optional__. Specifies the earliest date of the transaction records to be returned.<br><br> You must supply this field to retrieve transactions older than 90 days for banks accessed via the the [CBI Globe Gateway](https://docs.yapily.com/pages/data/financial-data-resources/data-restrictions/#cbi-globe-gateway).
    */
    'transactionFrom'?: Date;
    /**
    * __Optional__. Specifies the latest date of the transaction records to be returned.
    */
    'transactionTo'?: Date;
    /**
    * __Optional__. Used to set a hard date for when the user\'s associated `Consent` will expire.<br><br>**Note**: If this supported by the bank, specifying this is property is opting out of having a long-lived consent that can be perpetually re-authorised by the user. This will add an `expiresAt` field on the `Consent` object which will render it unusable after this date.<br><br>**Note**: This is not supported by every `Institution`. In such case, the request will not fail but the property will be ignored and the created `Consent` will not have an expiry date.
    */
    'expiresAt'?: Date;
    'accountIdentifiers'?: AccountInfo;
    /**
    * __Conditional__. Used to create a request for the transactions of the account specified. Once the user authorises the request, only the transactions can be obtained by executing [GET Account Transactions](./#get-account-transactions). <br><br>This can be specified in conjunction with `accountIdentifiersForBalance` to generate a `Consent` that can both access the accounts balance and transactions.
    */
    'accountIdentifiersForTransaction'?: Array<AccountInfo>;
    /**
    * __Conditional__. Used to create a request for the balance of the account specified. Once the user authorises the request, only the balance can be obtained by executing [GET Account Balances](./#get-account-balances).<br><br> This can be specified in conjunction with `accountIdentifiersForTransaction` to generate a `Consent` that can both access the accounts balance and transactions.
    */
    'accountIdentifiersForBalance'?: Array<AccountInfo>;
    /**
    * __Optional__. Used to granularly specify the set of features that the user will give their consent for when requesting access to their account information. Depending on the `Institution`, this may also populate a consent screen which list these scopes before the user authorises.<br><br>This endpoint accepts allow all [Financial Data Features](/guides/financial-data/features/#feature-list) that the `Institution` supports.To find out which scopes an `Institution` supports, check [GET Institution](./#get-institution).
    */
    'featureScope'?: Set<FeatureEnum>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "transactionFrom",
            "baseName": "transactionFrom",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "transactionTo",
            "baseName": "transactionTo",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "expiresAt",
            "baseName": "expiresAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "accountIdentifiers",
            "baseName": "accountIdentifiers",
            "type": "AccountInfo",
            "format": ""
        },
        {
            "name": "accountIdentifiersForTransaction",
            "baseName": "accountIdentifiersForTransaction",
            "type": "Array<AccountInfo>",
            "format": ""
        },
        {
            "name": "accountIdentifiersForBalance",
            "baseName": "accountIdentifiersForBalance",
            "type": "Array<AccountInfo>",
            "format": ""
        },
        {
            "name": "featureScope",
            "baseName": "featureScope",
            "type": "Set<FeatureEnum>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return AccountRequest.attributeTypeMap;
    }

    public constructor() {
    }
}

