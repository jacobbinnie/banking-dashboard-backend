/**
 * Yapily API
 * The Yapily API enables connections between your application and users\' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * OpenAPI spec version: 2.30.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Amount } from '../models/Amount';
import { NonSweepingPeriodicLimits } from '../models/NonSweepingPeriodicLimits';
import { HttpFile } from '../http/http';

/**
* Define the restrictions and limits for payment orders as part of Non-Sweeping VRP consent
*/
export class NonSweepingControlParameters {
    /**
    * __Mandatory__. Defines the authentication method(s) allowed in payment submission step. Allowed values are [SCA_REQUIRED, SCA_NOT_REQUIRED].
    */
    'psuAuthenticationMethods': Array<string>;
    'periodicLimits'?: Array<NonSweepingPeriodicLimits>;
    /**
    * __Mandatory__. Max amount that can be submitted per payment.
    */
    'maxAmountPerPayment'?: Amount;
    /**
    * __Optional__. Max cumulative amount that can be submitted under this consent.
    */
    'maxCumulativeAmount'?: Amount;
    /**
    * __Mandatory__. Initial payment to be charged under this consent. If enforced, this amount must match the first payment amount executed using this consent.
    */
    'initialPayment'?: Amount;
    /**
    * __Optional__. Max number of payments that can be submitted under this consent.
    */
    'maxCumulativeNumberOfPayments'?: number;
    /**
    * __Optional__. Start date when the consent becomes valid.
    */
    'validFrom'?: Date;
    /**
    * __Optional__. End date when the consent expires and becomes invalid.
    */
    'validTo'?: Date;
    /**
    * The use-case for the VRP consent supported by the bank. Allowed values: <br>`ONGOING` <br>`SUBSCRIPTION`
    */
    'recurringPaymentCategory'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "psuAuthenticationMethods",
            "baseName": "psuAuthenticationMethods",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "periodicLimits",
            "baseName": "periodicLimits",
            "type": "Array<NonSweepingPeriodicLimits>",
            "format": ""
        },
        {
            "name": "maxAmountPerPayment",
            "baseName": "maxAmountPerPayment",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "maxCumulativeAmount",
            "baseName": "maxCumulativeAmount",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "initialPayment",
            "baseName": "initialPayment",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "maxCumulativeNumberOfPayments",
            "baseName": "maxCumulativeNumberOfPayments",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "recurringPaymentCategory",
            "baseName": "recurringPaymentCategory",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return NonSweepingControlParameters.attributeTypeMap;
    }

    public constructor() {
    }
}

