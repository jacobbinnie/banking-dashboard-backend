/**
 * Yapily API
 * The Yapily API enables connections between your application and users\' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * OpenAPI spec version: 2.30.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ErrorIssue } from '../models/ErrorIssue';
import { VirtualAccountOriginalPayment } from '../models/VirtualAccountOriginalPayment';
import { VirtualAccountPaymentAmount } from '../models/VirtualAccountPaymentAmount';
import { HttpFile } from '../http/http';

export class VirtualAccountRefund {
    /**
    * Unique id of the refund
    */
    'id'?: string;
    'originalPayment'?: VirtualAccountOriginalPayment;
    /**
    * The current state of the transaction <br> INITIATED - The transaction request is acknowledged and will not undergo validation checks <br> PENDING - Initial checks were successful and the payment is pending processing. This is primarily used for future dated payments that have not yet reached their payment date <br> PROCESSING - Initial checks succeeded and the transaction request is now being processed <br> COMPLETED - The transaction has been successfully processed (terminal status) <br> FAILED - An failure occured during transaction processing (terminal status)
    */
    'status'?: string;
    'amount'?: VirtualAccountPaymentAmount;
    /**
    * List of issues relating to a FAILED status
    */
    'issues'?: Array<ErrorIssue>;
    /**
    * The reason of the refund request
    */
    'reason'?: string;
    /**
    * Date on which the refund instruction will be executed, that may be in the future
    */
    'paymentDate'?: string;
    /**
    * Reference to be associated with the refund. This will appear on the beneficiary\'s bank statement
    */
    'reference'?: string;
    /**
    * Indicates which account will be used for refund.
    */
    'refundTo'?: string;
    /**
    * Indicates if the refund is back to the original payer.
    */
    'refundToOriginalPayer'?: boolean;
    /**
    * Indicates the type of Beneficiary as either an INDIVIDUAL or BUSINESS
    */
    'beneficiaryType'?: string;
    /**
    * Unique id of the beneficiary to whom the payment will be made
    */
    'beneficiaryId'?: string;
    /**
    * Date and time that the refund was created
    */
    'createdDateTime'?: Date;
    /**
    * Date and time that the refund was updated
    */
    'updatedDateTime'?: Date;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "originalPayment",
            "baseName": "originalPayment",
            "type": "VirtualAccountOriginalPayment",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "VirtualAccountPaymentAmount",
            "format": ""
        },
        {
            "name": "issues",
            "baseName": "issues",
            "type": "Array<ErrorIssue>",
            "format": ""
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string",
            "format": ""
        },
        {
            "name": "paymentDate",
            "baseName": "paymentDate",
            "type": "string",
            "format": "date"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string",
            "format": ""
        },
        {
            "name": "refundTo",
            "baseName": "refundTo",
            "type": "string",
            "format": ""
        },
        {
            "name": "refundToOriginalPayer",
            "baseName": "refundToOriginalPayer",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "beneficiaryType",
            "baseName": "beneficiaryType",
            "type": "string",
            "format": ""
        },
        {
            "name": "beneficiaryId",
            "baseName": "beneficiaryId",
            "type": "string",
            "format": ""
        },
        {
            "name": "createdDateTime",
            "baseName": "createdDateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "updatedDateTime",
            "baseName": "updatedDateTime",
            "type": "Date",
            "format": "date-time"
        }    ];

    static getAttributeTypeMap() {
        return VirtualAccountRefund.attributeTypeMap;
    }

    public constructor() {
    }
}

