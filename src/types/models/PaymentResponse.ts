/**
 * Yapily API
 * The Yapily API enables connections between your application and users\' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.
 *
 * OpenAPI spec version: 2.30.1
 * Contact: support@yapily.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Amount } from '../models/Amount';
import { ExchangeRateInformationResponse } from '../models/ExchangeRateInformationResponse';
import { FrequencyResponse } from '../models/FrequencyResponse';
import { Payee } from '../models/Payee';
import { Payer } from '../models/Payer';
import { PaymentChargeDetails } from '../models/PaymentChargeDetails';
import { PaymentStatus } from '../models/PaymentStatus';
import { PaymentStatusDetails } from '../models/PaymentStatusDetails';
import { PriorityCodeEnum } from '../models/PriorityCodeEnum';
import { RefundAccount } from '../models/RefundAccount';
import { HttpFile } from '../http/http';

export class PaymentResponse {
    /**
    * Unique identifier of the payment.
    */
    'id'?: string;
    /**
    * Identification of the consent at the Institution.
    */
    'institutionConsentId'?: string;
    /**
    * __Mandatory__. A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.
    */
    'paymentIdempotencyId'?: string;
    'paymentLifecycleId'?: string;
    'status'?: PaymentStatus;
    'statusDetails'?: PaymentStatusDetails;
    'payer'?: Payer;
    'payeeDetails'?: Payee;
    /**
    * __Optional__. The payment reference or description. Limited to a maximum of 18 characters long.
    */
    'reference'?: string;
    /**
    * Monetary amount.
    */
    'amount'?: number;
    /**
    * Currency the payment amount is denoted in. Specified as a 3-letter ISO 4217 code.
    */
    'currency'?: string;
    'amountDetails'?: Amount;
    /**
    * Date and time of when the payment request was created.
    */
    'createdAt'?: Date;
    'firstPaymentAmount'?: Amount;
    /**
    * Date and time of when the first payment request is to be made.
    */
    'firstPaymentDateTime'?: Date;
    'nextPaymentAmount'?: Amount;
    /**
    * __Conditional__. Defines when the recurring payment is to be made.
    */
    'nextPaymentDateTime'?: Date;
    'finalPaymentAmount'?: Amount;
    /**
    * Date and time of when the final payment is to be made.
    */
    'finalPaymentDateTime'?: Date;
    /**
    * Number of recurring payment requests to be made as part of the instructed payment schedule.
    */
    'numberOfPayments'?: number;
    'previousPaymentAmount'?: Amount;
    /**
    * Date and time of when the previous payment request was posted.
    */
    'previousPaymentDateTime'?: Date;
    'chargeDetails'?: Array<PaymentChargeDetails>;
    /**
    * Details the execution type and the payment date between the payer and the payee.
    */
    'scheduledPaymentType'?: string;
    /**
    * Date and time of when the scheduled payment request will be made.
    */
    'scheduledPaymentDateTime'?: Date;
    'frequency'?: FrequencyResponse;
    /**
    * __Mandatory__. The currency to be transferred to the payee. This may differ from the currency the payment is denoted in and the currency of the payer\'s account. Specified as a 3-letter code (ISO 4217).
    */
    'currencyOfTransfer'?: string;
    /**
    * Specifies the external purpose code for the `Institution` - IS0 20022.
    */
    'purpose'?: string;
    'priority'?: PriorityCodeEnum;
    'exchangeRate'?: ExchangeRateInformationResponse;
    'refundAccount'?: RefundAccount;
    'bulkAmountSum'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "institutionConsentId",
            "baseName": "institutionConsentId",
            "type": "string",
            "format": ""
        },
        {
            "name": "paymentIdempotencyId",
            "baseName": "paymentIdempotencyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "paymentLifecycleId",
            "baseName": "paymentLifecycleId",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "PaymentStatus",
            "format": ""
        },
        {
            "name": "statusDetails",
            "baseName": "statusDetails",
            "type": "PaymentStatusDetails",
            "format": ""
        },
        {
            "name": "payer",
            "baseName": "payer",
            "type": "Payer",
            "format": ""
        },
        {
            "name": "payeeDetails",
            "baseName": "payeeDetails",
            "type": "Payee",
            "format": ""
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string",
            "format": ""
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number",
            "format": ""
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string",
            "format": ""
        },
        {
            "name": "amountDetails",
            "baseName": "amountDetails",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "firstPaymentAmount",
            "baseName": "firstPaymentAmount",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "firstPaymentDateTime",
            "baseName": "firstPaymentDateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "nextPaymentAmount",
            "baseName": "nextPaymentAmount",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "nextPaymentDateTime",
            "baseName": "nextPaymentDateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "finalPaymentAmount",
            "baseName": "finalPaymentAmount",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "finalPaymentDateTime",
            "baseName": "finalPaymentDateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "numberOfPayments",
            "baseName": "numberOfPayments",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "previousPaymentAmount",
            "baseName": "previousPaymentAmount",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "previousPaymentDateTime",
            "baseName": "previousPaymentDateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "chargeDetails",
            "baseName": "chargeDetails",
            "type": "Array<PaymentChargeDetails>",
            "format": ""
        },
        {
            "name": "scheduledPaymentType",
            "baseName": "scheduledPaymentType",
            "type": "string",
            "format": ""
        },
        {
            "name": "scheduledPaymentDateTime",
            "baseName": "scheduledPaymentDateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "frequency",
            "baseName": "frequency",
            "type": "FrequencyResponse",
            "format": ""
        },
        {
            "name": "currencyOfTransfer",
            "baseName": "currencyOfTransfer",
            "type": "string",
            "format": ""
        },
        {
            "name": "purpose",
            "baseName": "purpose",
            "type": "string",
            "format": ""
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "PriorityCodeEnum",
            "format": ""
        },
        {
            "name": "exchangeRate",
            "baseName": "exchangeRate",
            "type": "ExchangeRateInformationResponse",
            "format": ""
        },
        {
            "name": "refundAccount",
            "baseName": "refundAccount",
            "type": "RefundAccount",
            "format": ""
        },
        {
            "name": "bulkAmountSum",
            "baseName": "bulkAmountSum",
            "type": "number",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PaymentResponse.attributeTypeMap;
    }

    public constructor() {
    }
}



